I am going to ask you to write some programs to answer some questions based on a scene. You will be using the Python language, but you should only use the following features:

1. to classify whether an object has a certain property, use `cat(x)`, where `cat` is the property you want to test, and x is a variable.
2. to classify whether two objects have a certain property, use `on(x, y)`.
3. you can use and, or, not Boolean operations based on these classification results. For example, `cat(x) and lawn(y) and on(x, y)`
4. when you want to select an object based on a property that this object should have, use `iota(Object, lambda x: cat(x))` (selects the only cat in the scene).
5. when you want to check whether there exists a cat in the scene, use `exists(Object, lambda x: cat(x))`.
6. when you want to count the number of cats in a scene, use `count(Object, lambda x: cat(x))`
7. if you want to query the property of an object, for example, the color of a cat, use the following program: `describe(Color, iota(Object, lambda y: cat(y)))`
8: describe can only be used as the outermost function. If you want to compare a property between two objects, use `same_color(x, y)`.
9. there are also three built-in operations for number comparisons: equal, less_than, and greater_than.
10. if you want to compare whether two objects are the same object, use `same_object(x, y)`
10. other than these specified functions and variables in lambda functions, you should not invent new variables or constants. You also shouldn't use built-in comparison primitives, such as == and >=.
11. you should make your invented functions as primitive as possible. For example, instead of using `white_cat(x)`, use `white(x) and cat(x)`
12. Please make sure that your expression has balanced ( and ).
13. before you write the programs, first translate the language into a more simple form, removing excess information, for example, simplify <text>what's the color of the towel hanging draped over the side of the tub.</text> to <simplified>color of the towel on the tub</simplified>, before writing the correct program, <code>describle(Color, iota(Object, lambda x: towel(x) and on(x, iota(Object, lambda y: bathtub(y)))))</code>.

----

Now I first give you a few examples:

<text>What is the size of the apple?</text>
<simplified>size of apple</simplified>
<code>describe(Size, iota(Object, lambda y: apple(y)))</code>

<text>What is the shape of the cake that's not pink by itself in the corner?</text>
<simplified>shape of cake not pink</simplified>
<code>describe(Shape, iota(Object, lambda y: cake(y) and not(pink(y))))</code>

<text>What is the color of the cake in the room?</text>
<simplified>color of the cake</simplified>
<code>describe(Color, iota(Object, lambda y: cake(y)))</code>

<text>What is the material of the cat without an apple on itself?</text>
<simplified>material of the cat that does not have an apple</simplified>
<code>describe(Material, iota(Object, lambda y: cat(y) and not(have(y, iota(Object, lambda z: apple(z))))))</code>

<text>How many apples does the cat have in its paws?</text>
<simplified>count apples the cat have</simplified>
<code>count(Object, lambda x: have(iota(Object, lambda y: cat(y)), x) and apple(x))</code>

<text>Are there more apples over cakes at the end of the room?</text>
<simplified>greater count of apples than cakes</simplified>
<code>greater_than(count(Object, lambda x: apple(x)), count(Object, lambda x: cake(x)))</code>

<text>Is there an apple next to the cake that is front and center of the room?</text>
<simplified>exists apple next to the cake</simplified>
<code>exists(Object, lambda x: apple(x) and next(x, iota(Object, lambda y: and cake(y))))</code>

<text>Is there a same number of cakes and apples or is there less cakes than apples?</text>
<simplified>equal count of cakes and apples or less than count of cakes than apples</simplified>
<code>equal(count(Object, lambda x: cake(x)), count(Object, lambda x: apple(x))) or less_than(count(Object, lambda x: cake(x)), count(Object, lambda x: apple(x)))</code>


Now please translate the following text into a program. First output a simplified text version inside <simplified></simplified>, with a shortened version of <text>. Then, using ONLY the simplified text, without looking at the original text, output a short translated program inside <code></code>.
